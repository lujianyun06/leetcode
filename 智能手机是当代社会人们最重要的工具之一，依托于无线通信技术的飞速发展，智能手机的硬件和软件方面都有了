智能手机是当代社会人们最重要的工具之一，依托于无线通信技术的飞速发展，智能手机的硬件和软件方面都有了长足的进步。Android操作系统凭借开放性高，定制性强，兼容性好，等诸多优点，成为目前全世界在智能终端领域所占份额最大的操作系统，其市场占有率高达87%[1]。但是，Android系统却始终面临着恶意软件的威胁。
不同于Apple iOS系统的封闭性，Android系统是开放源代码的，这意味着市场上的手机厂商可以自由选择不同版本的Android系统定制自家的操作系统，而且要为了满足兼容性需要做大量的适配工作，所以推送更新也有快有慢，这就意味着大部分用户无法及时地更新自己的操作系统，所以市场上Android系统版本参差不齐。据统计，截止2019年10月，当前市场上共存近10个左右不同的Android版本，且所占份额最大的Android7.0只有不到30%的占有率[2]。无法及时更新系统可能导致的安全漏洞问题无时无刻不威胁着Android设备用户。除此之外，由于Android系统的开放性，使得应用市场没有一个集中的、统一的监管者，任何作者都可以在网络上发布自己创作的应用软件，这种低成本的创作门槛无疑促进了整个Android生态圈的繁荣发展，但同时却带来了极大的安全隐患：不经审核的应用软件在互联网上可以被任何用户得到，一旦这些应用软件是恶意的，它可能会暴露安全漏洞，窃取用户的隐私敏感数据[3]，甚至破坏用户设备的系统。这给使用Android系统的用户带来极大的安全隐患。
随着移动互联网的飞速发展，Android智能设备与基于该系统的应用软件从深度和广度上都与人们的社会经济活动和日常生活日益密切，因此设计实现Android恶意应用自动检测方法并推广使用，有效保护设备用户数据安全和隐私，满足公众对于防御来自恶意Android应用危害的诉求，具有很好的社会实用价值。






传统的恶意软件检测工具仅通过提取应用软件的描述信息，字符集、权限集、敏感系统调用等少量静态字段进行特征选取检测恶意行为。并在此基础上提出基于静态特征构建的关系图方法，虽然该方案已经在Android恶意软件检测方面取得了较好的成果。但随着Android应用产权保护技术的提高，越来越多的恶意应用作者将它们的应用使用诸如混淆，加密等正规保护方式隐藏恶意软件的一些特征来避过传统的恶意检测。国外的一些研究团队提出对应用软件的动态特征进行分析，通过跟踪应用软件的动态轨迹，观察目标指令的运行情况等对应用做进一步分析。
随着机器学习与人工智能技术的发展，越来越多的“原始而麻烦”的跨学科工具方法从另一个角度再次被机器学习领域所吸纳，在极大提高效率的同时也拓展了方法的使用场景，结合一些跨学科工具方法来进行Android恶意软件检测，能够提高恶意软件检测的成功率，也为Android平台的恶意软件检测以及其他系统平台下的类似研究提供了新颖的思想和方向。


随着移动互联网的飞速发展，Android智能设备与基于该系统的应用软件从深度和广度上都与人们的社会经济活动和日常生活日益密切，因此，有效保护设备用户数据安全和隐私，防御恶意攻击成为迫切且至关重要的工作。


2.1：研究目标
本文以实验室项目为依托。项目目的为设计和实现一种高效高准确度的Android恶意软件检测方法，主要是通过有效的算法采集出应用软件的多维异构特征，通过集成学习的方式训练恶意app检测模型，主要研究内容如下图所示：



在安智、豌豆荚、应用宝等国内知名应用商店下载经过VirusTotal安全认证标定的超过十万个正常app，并且在国内收集3万个左右公开且经过标定存档的恶意应用样本作为数据集。
本论文所实现的流程主要是通过收集到的app数据集，提取正常和恶意app的权限、系统调用、方法操作码组合、漏洞等特征，经过特征筛选和参数优化，训练出模型，并对使用模型对其他应用软件进行预测和评估。凭借该模型可以精确地分辨出恶意软件，为实现大规模应用自动化分析与恶意行为的有效检测提供理论基础及可行方法。




2.2 研究内容

2.2.1 应用特征类型选取
特征工程是机器学习必不可少的一环，据调查研究，在诸如kagglers、kddcup以及国内的天池大数据竞赛等比赛中，top的优胜队伍通常并不是使用了什么高深的算法，而是在特征工程环节做好了充分的准备，仅使用常见的模型便取得了较为出色的效果。由此可见，特征工厂对于整个项目研究过程和最终成型的模型的优劣具有至关重要的作用。而特征工程中，特征类型的选取又是非常关键的一个环节，如何从应用的诸多特征类型中选取出对于分类识别最有效的类型，是所要研究的问题，满足条件的这些特征类型应该具有如下条件：
1.具有较大的识别信息量，即所提供的特征类型应该具有很好的可分性，使分类器容易判别
2.具有可靠性，对于那些模棱两可，过于泛化的特征则不予选取。
3.具有尽可能强的独立性。重复的，相关性强的特征只选取最具代表性的，因为过多相关性强的特征不能提供丰富的信息，反而会增加特征清洗和训练的负担。

目前，绝大多数恶意检测研究都会选取应用的字符型静态特征，主要是权限、系统调用、应用基本信息等，如果一个应用想要读取短信，发送短信，使用摄像头，使用麦克风等操作，就必须注册相应的权限或者调用相关的系统API，这是Android平台的强制规范，所有的应用都不例外。几乎所有的敏感操作都需要进行注册，因此，这些特征几乎包括了一个应用软件所有与外界发生接触的可能渠道以及大部分敏感行为，如果一个恶意软件要窃取数据或者破坏数据，一定要注册相应的权限或调用相关的系统API才能达到目的，并且这些特征对于任何应用软件都是不难获取的，因此，获取使用这部分特征是必要且方便的。
一般来说，漏洞检测是对一个正常应用普遍的排错方式，经调查研究，大部分恶意软件都具有严重的安全漏洞，这是因为恶意软件的源代码编写具有极强的目的性，它本身就是为了通过一些非法途径窃取或破坏数据，所以可能会在代码上留出“后门”来使用，而这些“后门”一般情况下就是一些安全漏洞，所以恶意软件不会也不可能为了清除安全漏洞来提高软件的鲁棒性，这就意味着恶意软件有很大概率会比正常软件有更多的安全漏洞，利用这一点，通过一些手段获取应用软件存有的安全漏洞，并将其作为特征，可以使得恶意软件和正常软件有较好的区分性。

对于java语言来说，源代码会经过编译成为字节码指令，由JVM规范，一个方法的字节码除去一些结构化的内容，大体上将会被分为数据部分和操作码指令部分，数据部分是函数中进行处理的对象符号，临时变量等，操作码指令部分则是如何对数据进行操作的功能性部分，例如读写寄存器，代码跳转、基本运算等。可以说，一个应用所实现的具体功能，是由所有组成它的函数的操作码指令共同完成的。因此把操作码也可以作为一项重要的特征选取出来。


2.2.2特征处理与降维

在确定了特征类型后，需要对这些特征进行清洗处理和降维。有两个很重要的原因，首先，在一个学习任务中，如果属性过多，则会遇到维数灾难问题，如果能从这些属性中选取出重要的属性，让后续的数据处理，模型的训练仅在这些重要属性上构建，维数灾难会大为减轻。其次，即使是对一个类别中的不同特征，所体现的价值也截然不同。去掉可辨别性差的属性，只留下相关度更高的属性，会降低学习任务的难度，提高模型性能。
对于字符型静态特征，由于其本身的范围不是很大，应用的关键权限个数一般小于1000个，关键系统调用和安全漏洞的个数也在百十的数量级上，除此之外很重要的一点在于这些特征在每个应用中出现标志是二元的，即只有出现或不出现两种选择，因此对于这些类型的特征选择，可以仅通过简单的出现频次大小，即可选出合适的特征。
对于操作码特征，由于其数量巨大，并且单独的操作码所表现的语义不明确，不能很好的体现较强的识别性，因此不能简单的使用频次大小排列来选择特征，而须借助其他领域，如自然语言处理和信息检索相关的工具方法来选取关键的操作码特征


2.2.3恶意应用检测模型研究

恶意应用检测模型研究主要包括模型选择，超参数选择、模型训练，模型评估验证等个方面

从工具的上手难易程度、对数据结构的操作的方便程度，以及对与监督分类、自然语言处理和信息检索等多种领域的覆盖程度分析，考虑使用python语言并使用scikit-learn通用机器学习模块。该模块对上述3个领域都有较高的支持度。使用SVM、kNN、lightGBM、Random-Forest等多种分类模型组成组合模型。能够对预测结果有更精确的评判，避免过拟合或欠拟合。

在机器学习模型中，需要人工选择的参数称为超参数。比如随机森林中决策树的个数，人工神经网络模型中隐藏层层数和每层的节点个数，正则项中常数大小等等，他们都需要事先指定。超参数选择不恰当，就会出现欠拟合或者过拟合的问题。而在选择超参数的时候，可以选择网格搜索的方法，仅提供超参数的范围，让机器自动搜索最佳超参数，避免过多的人工干预。
而在验证方面使用交叉验证，交叉验证的基本思想是把在某种意义下将原始数据(dataset)进行分组,一部分做为训练集(train set),另一部分做为验证集(validation set or test set),首先用训练集对分类器进行训练,再利用验证集来测试训练得到的模型(model),以此来做为评价分类器的性能指标。


2.3 拟解决的关键科学问题：
本论文有如下拟解决的关键问题：
1）Android恶意软件自动检测理论基础

随着5G，物联网技术的推进，各种各样的应用软件层出不穷，而恶意软件的数量也水涨船高，在我国明确将互联网安全作为国家战略提出后，对于个人信息隐私的保护非常重要，如何评价一款软件是否为恶意，它具有什么样的行为才能称得上是恶意软件，如何准确地定义出恶意软件的行为特征，是一个非常重要的问题。也是恶意软件检测的基本问题。

2）特征选取算法
由于特征选取的重要性，好的特征对于优秀的模型是至关重要的。只有选取出区分度更高，相关性更好，正交度更高的特征，才能训练出效果更好的模型。对于特征的选取需要反复多次来验证不同的选取算法所选特征的优劣，并且对于不同类型的特征，例如字符型静态特征和操作码特征，由于其维数、语义差距很大，所以也需要不同的特征选取算法


3）模型预测结果评估
因为使用组合模型，在不同场景下对于不同模型的预测结果如何进行取舍就成为一个需要考虑的问题，在对于安全性要求高和更一般化的场景下如何对多种预测结果进行不同程度的组合来进行综合结果输出


创新点
4.1针对不同类型使用不同的特征选取方法
	目在目前大部分相关工作都是基于小规模应用软件的数据集，对于特征信息的采集方面考虑不够全面，在确定了特征类型后，几乎都是按照相同的方法来选取不同类型的特征，但由于不同类型特征的范围，表现形式以及所体现的意义不同，将这些不同类型的特征都采取同一种选取方法是不科学的，例如操作码的数量范围远远大于静态字符型特征，并且前者在不同类型软件中的频次所表现的语义也千差万别。因此对于不同特征类型应该选取更符合该种特征结构的方法。
4.2 将漏洞信息放入恶意软件检测的特征中
	目前关于Android恶意软件检测的相关研究一部分是基于静态信息特征的，另一些研究则基于普遍的动态特征，但动态特征的语义并不明显，而一些特定的动态特征组合则表现为安全漏洞，在恶意软件检测领域这种安全漏洞信息常常会被忽略。但经过统计恶意软件的安全漏洞不论是从数量上还是严重程度上都大于正常软件。通过提取软件存在的安全漏洞，并按重要程度对其进行分级，可以得到类似于软件静态信息特征的字符型特征。把这些字符型安全漏洞作为特征之一，是从另外一个角度检测恶意软件的新方法。
4.3 多种模型组合，根据场景评估预测结果
	目前的检测方法都是单一的评判标准，集成了多类不同形式的特征和多种检测方法形成组合模型，在对安全度要求不同的场景下可以灵活配置组合模型的评判策略，不仅提高了恶意软件的检测率，还提高了方法的灵活度，以适应多种情景。





研究方案设计和可行性：
收集Android软件样本
从国内外知名的应用商店下载应用软件，此外从互联网上收集超过1万个恶意样本，目前已掌握的应用软件总数已超过3万个，拟收集更多样本，以期最大化覆盖恶意样本类型。


阅读分类算法和组合模型相关文献
通过阅读分类算法的相关资料文献，对当前机器学习，深度学习中的分类算法进行学习，对主流的几种算法的原理，特点，超参数类型、适用场景、优缺点进行全面学习，并且结合本文，在考虑性能、预测效果、实验条件等几种因素的情况下，选取适合于本文的分类器算法。

阅读Android恶意软件检测相关领域的资料文献
阅读关于Android恶意软件检测，Android系统安全的国内外相关资料文献，阅读关于Dalvik虚拟机的手册资料，研究当前主流的研究成果中的检测方法与相关工具，掌握它们的基本原理、使用方式、性能指标、优缺点、核心算法。重点掌握其特征选取方式，并对这些研究的特征选取方式的优缺点进行评估，吸收它们的优点并尝试改进它们的缺点，在本论文基础上对其进行改造优化，设计出更符合本文特点的特征选取方式。

学习借鉴自然语言处理和信息检索领域的相关资料
了解自然语言处理领域和信息检索领域中关于文本集语料中关键信息提取相关知识，并学习其中的方法，将其借鉴到本文中关于特征提取的部分，以期能获得分辨度更好的特征。

学习大规模数据的处理方法
因为本文研究内容基于大规模数据集，所以需要对大数据的处理方法有所了解，通过对上述步骤提取的特征进行处理，例如阈值选择，数据归一化等操作。学习相关文献资料中对于数据的处理方法，除此之外要学习numpy模块中关于矩阵处理的方法

选择不同的模型进行实验并验证评估
根据上述调研结果，选择适合本文的分类算法，并对异构特征进行不同方式的选取，训练出相应的模型，并使用多种指标横向对比各个模型的效果，组合不同的模型并根据使用场景配置组合模型的评判策略来达到符合使用场景的更好效果。

3.2技术路线：
本论文采用如下技术路线：
首先从多种角度分析Android应用的相关特征信息，并使用一些工具软件提取这些特征，由于特征是多维异构的，并且数量巨大，因此需要把这些特征存储到数据库中。再根据每种类型特征的特点，选择不同的方法对这些特征进行筛选，只保留可靠性强，可分性好，独立且语义良好的特征。将数据提取一部分进行不同模型的超参数搜索，在搜索出最好的超参数后，将数据全集划分为训练集和测试集进行模型的训练和评估，训练出多种模型后将其进行组合，并定义在不同场景下影响组合模型预测结果的评估策略。

3.3 可行性分析

Android恶意软件检测实际上是一个二分类问题，关于二分类问题目前已经有许多成熟效果良好且大量投入使用的算法模型。关键的问题在于特征类型的选取和筛选，对于上述提到的类型的特征，已具有一些成熟的提取工具，而对于一些类型的特征进行筛选需要借鉴的算法都在自然语言处理和信息检索领域有着广泛的使用，需要做的工作是把这些算法结合本文使用场景加以应用。在数据集方面，目前数据集已经收集大量正常软件和恶意软件，接下来的工作需要按照不同特征将数据录入到MongoDB数据库。基于上述条件，我们完全有能力完成数据的录入，算法的改进、模型的训练等工作，因此本论文具有可行性。







在确定了特征类型后，需要对这些特征进行清洗处理和降维。有两个很重要的原因，首先，在一个学习任务中，如果属性过多，则会遇到维数灾难问题，如果能从这些属性中选取出重要的属性，让后续的数据处理，模型的训练仅在这些重要属性上构建，维数灾难会大为减轻。其次，即使是对一个类别中的不同特征，所体现的价值也截然不同。去掉可辨别性差的属性，只留下相关度更高的属性，会降低学习任务的难度，提高模型性能。
对于字符型静态特征，由于其本身的范围不是很大，应用的关键权限个数一般小于1000个，关键系统调用和安全漏洞的个数也在百十的数量级上，除此之外很重要的一点在于这些特征在每个应用中出现标志是二元的，即只有出现或不出现两种选择，因此对于这些类型的特征选择，可以仅通过简单的出现频次大小，即可选出合适的特征。
对于操作码特征，借助自然语言处理中的N元模型概念（N-gram），它的特点是某个词的出现依赖于其他若干词。N-gram本身也指由N个单词组成的集合，而这些单词之间彼此的联系，使得N-gram具有比单个单词更加丰富的语义。因此将每个操作码视为一个单词，并将其按照N个为一组组合起来作为特征。由于操作码数量巨大，在进行N-gram后数量更是上升了一个维度，因此对于N-gram操作码特征必须进行选择和降维处理。在部分的研究中对于操作码的选取是将操作码的出现次数做二元化处理，即仿照上述静态特征，当其出现时，忽略出现的具体数字，仅标记为“出现”。然后根据样本总体对于操作码频次大小排序，选择出总频次较高的操作码。但这样造成的问题是模糊了恶意软件和正常的软件在操作码上的区别，因为一些操作码可能在恶意软件和正常软件中出现的次数由很大差距；而有的操作码可能在两者中都频繁出现，属于区别度不高的操作码，在二元化处理后，后者在总数据集中的频次要高于前者，这样可能会在根据频次选取操作码的过程中忽略掉前者。但很明显前者是具有更好区分度的特征，因此，对于操作码的降维，不能简单地根据频次来选取，同时又要兼顾可行性和机器负载，考虑使用词频-逆文本词频（TF-IDF）。
TF-IDF（term frequency–inverse document frequency）是一种用于信息检索与数据挖掘的常用加权技术。TF意思是词频(Term Frequency)，IDF意思是逆文本频率指数(Inverse Document Frequency)。它是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。对于单个字词来说，兼顾了关键性和独特性，是一种非常优秀的关键词选择方法。结合操作码特征选择的场景，可以将N-gram操作码和TF-IDF结合起来。对于样本集的处理上，首先不对操作码的出现次数做二元化处理，其次逐个将单个恶意软件与大量正常软件放入一个集合，统计每个恶意软件相对于该集合的关键词（即关键操作码）及其对应的TF-IDF值，将所有恶意软件的关键操作码做统计并提取出高频操作码，对于正常软件也做类似的处理，把两个操作码集合作去重处理后，作为操作码特征，可以很好地保证操作码特征对于两类软件的区分度。


1.改进特征选取方法
在目前大部分相关工作都是基于小规模应用软件的数据集，且也仅限于提取权限，API等行为特征。一部分涉及了提取操作码的工作没有对操作码组合进行行为分析，
在特征的选取方面，都是使用二元化的总体频率进行筛选，没有可以突出恶意软件检测主题的方法。
本项目在软件操作码特征的选取方面使用自然语言处理领域的N-gram，相比单个操作码，能提供更好的特征，更准确地体现软件的行为语义。在操作码组合的提取上，结合信息检索领域的TF-IDF统计方法，将操作码视为文本词汇，将恶意样本和正常样本的操作码进行交叉比对，提取出更加具有类型特征的关键操作码组合作为特征。为Android恶意软件检测的特征提取方向提供一种新的思路。






漏洞特征：
ALLOW_BACKUP
COMMAND
COMMAND_SU
DB_SEE
FILE_DELETE
HACKER_DB_KEY
MANIFEST_GCM
MASTER_KEY

权限特征：

android.permission.ACCESS_NETWORK_STATE
android.permission.ACCESS_WIFI_STATE
android.permission.READ_PHONE_STATE
android.permission.WRITE_EXTERNAL_STORAGE
android.permission.CAMERA
android.permission.RECORD_AUDIO
android.permission.CAPTURE_AUDIO_OUTPUT
android.hardware.camera.autofocus

getDeviceId 
getCellLocation 
setFlags 
addFlags 
setDataAndType
putExtra 
init 
query 


研究基础：
本人先对Android系统架构进行了解学习，了解Android应用软件的组成结构，包括资源文件，注册文件、代码文件等。并且对Android的静态资源注册和运行时特征有所了解。然后通过查阅相关资料对Android的Dalvik虚拟机结构以及应用软件的字节码结构进行学习。

阅读了国内外关于恶意软件检测的相关研究文献，学习这些研究的思想并比较它们的优劣，并基于已有的数据集对目前的一些提取app特征的小工具进行实际操作，并从其中挖掘可以用于本论文的部分。

关于机器学习方面，本人学习了这方面课程并阅读了书籍，对机器学习及分类算法有一定的了解，同时针对本论文调研了相关的分类算法，了解并选择适合本论文的分类算法。

关于特征工程涉及的信息检索方法，本人选修了信息检索相关课程，对于该课程及其知识有一个大体的把握，对一些通用的信息检索知识和算法有一定的了解。

在工程实践方面，本人具有较好的编程经验。在确定本论文的技术方案，技术难点后，对其涉及到的技术，知识，工具等进行了学习。并且动手搭建了整个实验环境。

实验条件：
数据部分，课题组已经在安智、豌豆荚、应用宝等国内知名应用商店以及国外部分应用商店下载经过VirusTotal安全认证标定的超过3个正常应用，并且在国内收集1万个左右公开且经过标定存档的恶意应用样本作为数据集。

工具平台方面，整个项目所需要的开发环境已经由本人在服务器上搭建完毕，配置了包括python+scikit-learn环境，MongoDB数据库以及若干工具环境用于数据的存储，管理和计算。并且安装了机器资源监视平台，能在保证机器稳定的前提下充分利用计算资源。即该论文所需的软件与硬件资源都已具备


















